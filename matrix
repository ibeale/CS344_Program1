#!/bin/bash

# Written by Isaac Beale
# For CS344 SP19
# Due 4/17/20

dims() {
	# Check if there is a second argument
	# This implicitly checks for arguments >=2
    if [[ $2 ]]
    then
        echo "Too many arguments" 1>&2
        return 1
    fi
    
	# if $1 returns true, contents are coming from a file and not stdin
    if [[ $1 ]]
    then
		# -r flag checks if file is readable and -a flag checks if file exists
        if [[ -r $1 && -a $1 ]]
        then
            rows=0
			# While iterating through the rows, count from 0. This will give how many rows there are
            while read row
            do
                rows=$(( rows + 1))
				# I'm recounting cols every loop, but it should be the same every time anyway.
                cols=0
                for num in $row
                do
                    cols=$(( cols + 1))
                done
            done <$1
			# echo the result
            echo $rows $cols
        else
			# If the -r and -a flags don't trigger, then the file is bad.
            echo "Bad File" 1>&2
            return 1
        fi
	# matrix is coming from stdin
    else        
        row=0
        while read row
        do
            rows=$(( rows + 1))
            cols=0
            for num in $row
            do
                cols=$(( cols + 1))
            done
		# Here instead of getting input from $1, the read function just takes from stdin
        done
        echo $rows $cols
    fi


}


transpose() {
	if [[ $2 ]]
    then
        echo "Too many arguments" 1>&2
        return 1
    fi

    if [[ $1 ]]
    then
        if [[ -r $1 && -a $1 ]]
        then

			# Retrieve the number of columns and rows using the dims function and cutting the respective field
			cols=$(echo $( dims $1 ) | cut -d ' ' -f2  )
			rows=$(echo $( dims $1 ) | cut -d ' ' -f1  )
			for ((i = 1; i <= $cols; i++))
			do
				colfile="colfile_$$"
				rowfile="rowfile_$$"
				>$rowfile

				# Get the first column and put it into a tempfile
				# colfile will have a single column delimited by newlines
				cat $1 | cut -f $i >$colfile
				for ((j=1; j<$rows; j++))
				do
					# For each row, take the corresponding row and append it to the rowfile
					# this essentially takes a newline delimited colfile and turns it into a
					# tab delimited rowfile
					head -$j $colfile | tail -1 | tr -d '\n' >>$rowfile
					echo $'\t' | tr -d '\n' >>$rowfile
				done
				# for the last iteration, instead of appending a tab, append a newline
				# by echoing nothing into the rowfile
				head -$j $colfile | tail -1 | tr -d '\n' >>$rowfile
				echo >> $rowfile

				# the rowfile then will contain a correctly formatted transposed matrix
				cat $rowfile

		
			done
		
			rm -f $colfile
			rm -f $rowfile
        else
            echo "Bad File" 1>&2
            return 1
        fi
    else        
		matfile="matfile$$"
		# code is the same as above, except we will cat stdin into a file and use the file
		cat >$matfile

		cols=$(echo $( dims $matfile ) | cut -d ' ' -f2  )
		rows=$(echo $( dims $matfile ) | cut -d ' ' -f1  )
		for ((i = 1; i <= $cols; i++))
		do
			colfile="colfile_$$"
			rowfile="rowfile_$$"
			>$rowfile
			cat $matfile | cut -f $i >$colfile
			for ((j=1; j<$rows; j++))
			do
				head -$j $colfile | tail -1 | tr -d '\n' >>$rowfile
				echo $'\t' | tr -d '\n' >>$rowfile
			done
			head -$j $colfile | tail -1 | tr -d '\n' >>$rowfile
			echo >> $rowfile
			cat $rowfile
	
		done
	

		rm -f $colfile
		rm -f $rowfile
		rm -f $matfile
    fi

}


mean() {
	if [[ $2 ]]
    then
        echo "Too many arguments" 1>&2
        return 1
    fi
	if [[ $1 ]]
    then
        if [[ -r $1 && -a $1 ]]
        then
			temp="temp$$"
			rows=$(echo $( dims $1 ) | cut -d ' ' -f1  )

			# get the transposed matrix and put it into a tempfile so that we can use the read function
			echo "$( transpose $1 )" >$temp
			meanfile="mean$$"
			while read col
			do
				sum=0
				for num in $col
				do
					# iteratively calculate the sum
					((sum+=num))
				done
				# use the given formula to calculate the rounded mean and output it to the mean file
				echo $(( (sum + (rows/2)*( (sum>0)*2-1 )) / rows )) >>$meanfile
			done <$temp
			# The meanfile will be a column of data, so we transpose it to get the correct format
			transpose $meanfile
		fi
		rm -f $temp
		rm -f $meanfile
	else
		temp="temp$$"
		temp2='temp2$$'
		# This function is the same as the above, with the addition of temp2
		# which contains the contents of stdin and then is used in lieu of $1 in the first part.
		cat >$temp2
		rows=$(echo $( dims $temp2 ) | cut -d ' ' -f1  )
		echo "$( transpose $temp2 )" >$temp
		meanfile="mean$$"
		while read col
		do
			sum=0
			for num in $col
			do
				((sum+=num))
			done
			echo $(( (sum + (rows/2)*( (sum>0)*2-1 )) / rows )) >>$meanfile
		done <$temp
		transpose $meanfile
		rm -f $temp
		rm -f $meanfile
		rm -f $temp2

	fi
}


add(){
	if [[ $3 ]]
    then
        echo "Too many arguments" 1>&2
        return 1
    fi
	if [[ $1 && $2 ]]
    then
        if [[ -r $1 && -a $1 && -r $2 && -a $2 ]]
        then
			# Get the dimensions of both matrices to check if they'll work for addition
			cols1=$(echo $( dims $1 ) | cut -d ' ' -f2  )
			rows1=$(echo $( dims $1 ) | cut -d ' ' -f1  )
			cols2=$(echo $( dims $2 ) | cut -d ' ' -f2  )
			rows2=$(echo $( dims $2 ) | cut -d ' ' -f1  )
			if [[ $cols1 != $cols2 || $rows1 != $rows2 ]]
			then
				echo "Matrices do not match" 1>&2
				return 1
			# If they match, proceed.
			else
				outfile="outfile$$"
				>$outfile
				# iterate through the matrices sumultaneously
				for ((i=1; i<=$rows1; i++))
				do
					temp1="temp1$$"
					temp2="temp2$$"
					# get the first row of each matrix
					head -$i $1 | tail -1 | tr -d '\n' >$temp1
					head -$i $2 | tail -1 | tr -d '\n' >$temp2
					for ((j=1; j<$cols1; j++))
					do
						# get each number in the row of the matrix
						num1=$( cat $temp1 | cut -f $j )
						num2=$( cat $temp2 | cut -f $j )
						# add them together and append to the output file
						echo $((num1 + num2)) | tr -d '\n' >>$outfile
						echo $'\t' | tr -d '\n' >>$outfile
					done
					# The last iteration cannot end with a tab space, so we take it out of the forloop
					num1=$( cat $temp1 | cut -f $j )
					num2=$( cat $temp2 | cut -f $j )
					echo $((num1 + num2)) >>$outfile
				done
				cat $outfile
			fi
		fi
		rm -f $temp1
		rm -f $temp2
		rm -f $outfile
	else
		echo "Not enough arguments" 1>&2
		return 1
	fi
}


multiply(){
	if [[ $3 ]]
    then
        echo "Too many arguments" 1>&2
        return 1
    fi
	if [[ $1 && $2 ]]
    then
        if [[ -r $1 && -a $1 && -r $2 && -a $2 ]]
        then
			cols1=$(echo $( dims $1 ) | cut -d ' ' -f2  )
			rows1=$(echo $( dims $1 ) | cut -d ' ' -f1  )
			cols2=$(echo $( dims $2 ) | cut -d ' ' -f2  )
			rows2=$(echo $( dims $2 ) | cut -d ' ' -f1  )
			# cols1 must equal rows2 for the multiplication to be successful
			if [[ $cols1 != $rows2 ]]
			then
				echo "Matrices incompatible" 1>&2
				return 1
			else
				# Create the final output file
				outfile="outfile$$"
				>$outfile
				m2file="m2file$$"
				# Transpose the second matrix so that it is easier to work with
				echo "$( transpose $2 )" >$m2file
				for ((i=1; i<=$rows1; i++))
				do
					temp1="temp1$$"
					temp2="temp2$$"
					head -$i $1 | tail -1 | tr -d '\n' >$temp1
					
					for ((j=1; j<$cols2; j++))
					do
						sum=0
						head -$j $m2file | tail -1 | tr -d '\n' >$temp2
						for ((k=1; k<=$rows2; k++))
						do
							num1=$( cat $temp1 | cut -f $k )
							num2=$( cat $temp2 | cut -f $k )
							((sum+= ( num1 * num2 ) ))
						done
						echo $sum | tr -d '\n' >>$outfile
						echo $'\t' | tr -d '\n' >>$outfile
					done
					sum=0
					head -$j $m2file | tail -1 | tr -d '\n' >$temp2
					for ((k=1; k<=$rows2; k++))
					do
						num1=$( cat $temp1 | cut -f $k )
						num2=$( cat $temp2 | cut -f $k )
						((sum+= ( num1 * num2 ) ))
					done
					echo $sum | tr -d '\n' >>$outfile
					echo >>$outfile

				done
				cat $outfile
			fi
		fi
		rm -f $temp1
		rm -f $temp2
		rm -f $outfile
		rm -f $m2file
	else
		echo "Not enough arguments" 1>&2
		return 1
	fi
}

$1 "${@:2}"